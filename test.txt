ss://YWVzLTEyOC1nY206cTBwRWxueUQwaEM4Y0lDYmI3WG5BZw%3D%3D@alien3.ir-connect-speed.com:2300#%288877%40tm_alien%29%E2%9C%85%D9%85%D8%B3%D8%AA%D9%82%DB%8C%D9%85


// src/routes/game/+page.svelte

<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import { goto } from '$app/navigation';
  import WaitingRoom from '$lib/components/WaitingRoom.svelte';
  import TypingGame from '$lib/components/TypingGame.svelte';
  
  let ws: WebSocket;
  let currentView = 'waiting'; // 'waiting', 'game'
  let roomData = { players: {} };
  let gameData: any = null;
  let typingGameComponent: TypingGame;
  let selectedRoom: string = '';
  let isPersianRoom = false; // Flag for Persian room
  
  onMount(() => {
    // Get the selected room from localStorage
    selectedRoom = localStorage.getItem('selected_room') || 'test';
    
    // Check if it's the Persian room
    isPersianRoom = selectedRoom === 'room3';
    
    // Connect to WebSocket server
    ws = new WebSocket('ws://localhost:9000/ws'); // Replace with your actual WebSocket URL
    
    ws.onopen = () => {
      console.log('Connected to the server');
      // Join the selected room when the page loads
      joinGame(selectedRoom);
    };
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      switch(data.type) {
        case 'roomStatus':
          roomData = data;
          currentView = 'waiting';
          break;
        case 'startGame':
          gameData = data;
          currentView = 'game';
          break;
        case 'userProgress':
          // Handle progress updates from server
          if (typingGameComponent && data.userid && typeof data.percentage === 'number') {
            typingGameComponent.updateProgress(data.userid, data.percentage);
          }
          break;
        case 'playerRank':
          // Handle player rank updates
          if (typingGameComponent && data.playerrank) {
            typingGameComponent.updatePlayerRanks(data.playerrank);
          }
          break;
        case 'endGame':
          // Handle game end signal
          if (typingGameComponent) {
            typingGameComponent.endGame(data);
          }
          break;
        default:
          console.log('Received unknown message type:', data.type);
      }
    };
    
    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
    
    ws.onclose = () => {
      console.log('Disconnected from the server');
    };
  });
  
  onDestroy(() => {
    if (ws) {
      ws.close();
    }
  });
  
  function joinGame(roomName: string = selectedRoom) {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'join',
        content: { room: roomName }
      }));
    }
  }
  
  function sendReady() {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'ready'
      }));
    }
  }
  
  function sendWordComplete(word: string) {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'wordComplete',
        content: { word }
      }));
    }
  }
  
  function handlePlayAgain() {
    // Return to waiting room view
    currentView = 'waiting';
    
    // Rejoin the game room
    joinGame();
  }
  
  function changeRoom() {
    // Navigate back to the rooms list
    goto('/rooms');
  }
</script>

<svelte:head>
  <title>Tenfinger Typing Game - {selectedRoom} Room</title>
  <meta name="description" content="Multiplayer typing game" />
</svelte:head>

<div class="container {isPersianRoom ? 'persian-container' : ''}">
  {#if currentView === 'waiting'}
    <div class="room-header">
      <h2>Room: {selectedRoom} {isPersianRoom ? '(Persian)' : ''}</h2>
      <button class="change-room-btn" on:click={changeRoom}>Change Room</button>
    </div>
    <WaitingRoom 
      players={roomData.players} 
      onReady={sendReady}
      isPersian={isPersianRoom}
    />
  {:else if currentView === 'game'}
    <TypingGame 
      gameData={gameData} 
      onWordComplete={sendWordComplete}
      bind:this={typingGameComponent}
      on:playAgain={handlePlayAgain}
      isPersian={isPersianRoom}
    />
  {/if}
</div>

<style>
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .persian-container {
    /* Specific styles for Persian text direction */
    direction: rtl;
    text-align: right;
    font-family: 'Tahoma', 'Arial', sans-serif;
  }
  
  .room-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #eee;
  }
  
  .room-header h2 {
    margin: 0;
    font-size: 1.75rem;
  }
  
  .change-room-btn {
    padding: 0.5rem 1rem;
    background-color: #f5f5f5;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .change-room-btn:hover {
    background-color: #e0e0e0;
  }
</style>


// src/routes/rooms/+page.svelte
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import { goto } from '$app/navigation';
  
  let ws: WebSocket;
  let rooms: Record<string, Record<string, any>> = {};
  let loading = true;
  let error = null;
  
  onMount(() => {
    // Connect to WebSocket server
    ws = new WebSocket('ws://localhost:9000/ws');
    
    ws.onopen = () => {
      console.log('Connected to the server');
      // Request the list of rooms
      requestRooms();
    };
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      switch(data.type) {
        case 'roomsStatus':
          rooms = data.rooms || {};
          loading = false;
          break;
        default:
          console.log('Received unknown message type:', data.type);
      }
    };
    
    ws.onerror = (err) => {
      console.error('WebSocket error:', err);
      error = 'Failed to connect to the server. Please try again later.';
      loading = false;
    };
    
    ws.onclose = () => {
      console.log('Disconnected from the server');
    };
  });
  
  onDestroy(() => {
    if (ws) {
      ws.close();
    }
  });
  
  function requestRooms() {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'roomsStatus'
      }));
    }
  }
  
  function refreshRooms() {
    loading = true;
    requestRooms();
  }
  
  function joinRoom(roomName: string) {
    // Store the room name to be used in the game page
    localStorage.setItem('selected_room', roomName);
    // Navigate to the game page
    goto('/game');
  }
  
  function createNewRoom() {
    // Open a modal or prompt for room name
    const roomName = prompt('Enter a new room name:');
    if (roomName && roomName.trim()) {
      localStorage.setItem('selected_room', roomName.trim());
      goto('/game');
    }
  }
</script>

<svelte:head>
  <title>Available Rooms - Tenfinger Typing Game</title>
  <meta name="description" content="Join a multiplayer typing game room" />
</svelte:head>

<div class="container">
  <div class="rooms-container">
    <h2>Available Rooms</h2>
    
    {#if loading}
      <div class="loading">
        <p>Loading available rooms...</p>
      </div>
    {:else if error}
      <div class="error">
        <p>{error}</p>
        <button on:click={refreshRooms}>Try Again</button>
      </div>
    {:else}
      <div class="room-controls">
        <button class="refresh-btn" on:click={refreshRooms}>
          Refresh Rooms
        </button>
        <button class="create-btn" on:click={createNewRoom}>
          Create New Room
        </button>
      </div>
      
      {#if Object.keys(rooms).length === 0}
        <div class="no-rooms">
          <p>No active rooms found. Create a new room to start playing!</p>
        </div>
      {:else}
        <div class="rooms-list">
          {#each Object.entries(rooms) as [roomName, players]}
            <div class="room-card">
              <div class="room-info">
                <h3>{roomName}</h3>
                <p>Players: {Object.keys(players).length}</p>
              </div>
              <button class="join-btn" on:click={() => joinRoom(roomName)}>
                Join Room
              </button>
            </div>
          {/each}
        </div>
      {/if}
    {/if}
  </div>
</div>

<style>
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .rooms-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  h2 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .loading, .error, .no-rooms {
    width: 100%;
    max-width: 600px;
    background-color: #f9f9f9;
    padding: 2rem;
    border-radius: 8px;
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .error {
    background-color: #fff8f8;
    border: 1px solid #ffcdd2;
  }
  
  .loading p, .error p, .no-rooms p {
    margin-bottom: 1rem;
  }
  
  .room-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    width: 100%;
    max-width: 600px;
    justify-content: space-between;
  }
  
  .refresh-btn, .create-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .refresh-btn {
    background-color: #f5f5f5;
    color: #333;
  }
  
  .refresh-btn:hover {
    background-color: #e0e0e0;
  }
  
  .create-btn {
    background-color: #4a56e2;
    color: white;
  }
  
  .create-btn:hover {
    background-color: #3643cf;
  }
  
  .rooms-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    max-width: 600px;
  }
  
  .room-card {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .room-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  
  .room-info h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.25rem;
  }
  
  .room-info p {
    margin: 0;
    color: #666;
  }
  
  .join-btn {
    padding: 0.5rem 1rem;
    background-color: #4a56e2;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .join-btn:hover {
    background-color: #3643cf;
  }
  
  button {
    cursor: pointer;
  }
</style>

// src/routes/+page.svelte - Main landing page

<script lang="ts">
  import { goto } from '$app/navigation';
  
  function startGame() {
    goto('/rooms');
  }

  function gototest() {
      goto("/test")
  }
</script>

<svelte:head>
  <title>Tenfinger Typing Game</title>
  <meta name="description" content="Multiplayer typing game" />
</svelte:head>

<div class="container">
  <div class="hero">
    <h1>Tenfinger Typing Game</h1>
    <p class="subtitle">Compete with players from around the world in real-time typing challenges</p>
    
    <div class="cta-buttons">
      <button class="start-button" on:click={startGame}>Start Game</button>
      <a href="/login" class="login-link">Login / Register</a>
    </div>
  </div>
  
  <div class="features">
    <div class="feature">
      <h3>Real-Time Competition</h3>
      <p>Race against other players to see who can type the fastest with perfect accuracy</p>
    </div>
    
    <div class="feature">
      <h3>Improve Your Skills</h3>
      <p>Track your progress and see your typing speed and accuracy improve over time</p>
    </div>
    
    <div class="feature">
      <h3>Multiple Rooms</h3>
      <p>Join existing game rooms or create your own custom room to challenge friends</p>
    </div>
  </div>
</div>

<style>
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .hero {
    text-align: center;
    padding: 3rem 1rem;
    margin-bottom: 3rem;
  }
  
  h1 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
    color: #333;
  }
  
  .subtitle {
    font-size: 1.25rem;
    color: #666;
    max-width: 600px;
    margin: 0 auto 2.5rem auto;
  }
  
  .cta-buttons {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }
  
  .start-button {
    padding: 0.875rem 2rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    background-color: #4a56e2;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, transform 0.2s;
  }
  
  .start-button:hover {
    background-color: #3643cf;
    transform: translateY(-2px);
  }
  
  .login-link {
    padding: 0.875rem 2rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: #4a56e2;
    background-color: transparent;
    border: 2px solid #4a56e2;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
    text-decoration: none;
    display: inline-block;
  }
  
  .login-link:hover {
    background-color: #4a56e2;
    color: white;
    text-decoration: none;
  }
  
  .features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  .feature {
    background-color: #f9f9f9;
    padding: 2rem;
    border-radius: 8px;
    text-align: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
  }
  
  .feature:hover {
    transform: translateY(-5px);
  }
  
  .feature h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #333;
  }
  
  .feature p {
    color: #666;
    margin: 0;
  }
</style>


// src/app.css - Global styles

/* Add these lines to your src/app.css */
@import url('https://fonts.googleapis.com/css2?family=Vazirmatn:wght@400;500;700&display=swap');

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
}

/* For Persian text content */
.persian-text {
  font-family: 'Vazirmatn', 'Tahoma', sans-serif;
  direction: rtl;
  text-align: right;
}

a {
  color: #4a56e2;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
}

button {
  cursor: pointer;
}


